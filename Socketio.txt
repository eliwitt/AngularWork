Socket connections the Omnisense way with Socket.ioSTEP 01 //code//Install Socket.IO server, Node.JS/NPM:npm install socket.ioHTML Socket.IO Client CDN:<script src="https://cdn.socket.io/socket.io-1.2.0.js"></script>STEP 02//code///**Registers Facebook identifier and device type on the socket@param device {string} desktop or mobile@param id {string} the encoded Facebook identifier*/socket.set = function(device, id) {    this.device = device;    this.identifier = id;};STEP 03//code///**Like socket.emit, but with device and identifier automatically passed@param eventType {string} event channel@param data {object} whatever data you want to send*/socket.message = function(eventType, data) {    this.emit('message', {        device: {            type: this.device,            identifier: this.identifier        },        type: eventType,        data: data    });};STEP 04 //code//// Listen to 'message' events - notice how we "inject" the socket parametersocket.on('message', handleSocket.bind(null, socket));function handleSocket(socket, event) {// Now filter behavior based on the event typeif(event.type == 'device') {		if(event.device.type == "desktop") {		// Registers the desktop once		onDesktopConnection(event.device, socket, event.state);		}}}// More event processing (based on game state, device etc)// If event not processed above, send event to other devicesendToOther(event.device, event.type, event.data);}STEP 05//code//// Case 1: desktop, after Facebook connection:this.$on('facebook:identifier', function(facebookId) {socket.set('desktop', facebookId);socket.message('device:ready');});// Case 2: dragging main scene on mobileSceneBehavior.prototype.onTouchMove = function(data) {	// Some event/data processingsocket.message('scene:translate', {zoneId: currentZone.id, translate: translateX});};